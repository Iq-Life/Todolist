{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/login/login-reducer.ts","app/app-reducer.ts","features/todolists/tasks/tasks-reducer.ts","components/editableSpan/EditableSpan.tsx","components/addItemForm/AddItemForm.tsx","features/todolists/tasks/Task.tsx","features/todolists/Todolist.tsx","features/todolists/todolist-reducer.ts","features/todolists/TodolistsList.tsx","components/errorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setErrorAC","setStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","InitialState","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","Error","apiModel","description","priority","startDate","deadline","res","resultCode","updateTaskAC","catch","EditableSpan","React","memo","disabled","props","useState","editMode","setEditMode","setTitle","onEditMode","useCallback","offEditMode","trim","changeTitle","onKeyPress","charCode","onChange","e","currentTarget","TextField","variant","autoFocus","onBlur","onDoubleClick","className","s","ul_span","AddItemForm","addItem","setError","addTask","color","label","helperText","IconButton","size","style","marginLeft","marginTop","onClick","Task","onClickHandler","removeTask","onChangeHandler","newIsDaneValue","checked","changeTaskStatus","Completed","New","changeTaskTitle","key","is_done","paddingLeft","listStyleType","margin","Checkbox","opacity","but_del","aria-label","Delete","Todolist","demo","useDispatch","useEffect","todolist","items","setTasksAC","removeTodolist","changeTodolistTitle","tasksForTodolist","filter","changeFilterAll","changeFilter","changeFilterActive","changeFilterCompleted","display","justifyContent","Button","startIcon","entityStatus","fontFamily","marginBottom","map","changeTodolistTitleAC","TodolistsList","todolists","useSelector","state","auth","thunk","changeTaskEntityStatusAC","todoListId","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","newTitle","removeTodolistAC","removeTodolistTC","addTodolist","newTodolist","addTodolistTC","changeTodolistTitleTC","Grid","container","padding","spacing","flexWrap","flexDirection","tl","allTodolistTasks","Paper","elevation","to","Alert","ErrorSnackbar","app","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","validate","test","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","errors","FormControlLabel","control","App","logOutHandler","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","width","textAlign","CircularProgress","rootReducer","combineReducers","action","stateCopy","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cb313ebf.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"api-key\": \"d9baecdc-1ca4-440c-8d10-aee3256853c8\",\r\n    },\r\n};\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    ...settings,\r\n});\r\n\r\n//api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>(`todo-lists`);\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<CreateDataTodolistType>>\r\n        (`todo-lists`,{ title: title });\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType<{}>>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType<{}>>(`todo-lists/${id}`, {\r\n            title: title,\r\n        });\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    createTask(title: string, todolistId: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>\r\n        (`todo-lists/${todolistId}/tasks`,{ title: title });\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType<{}>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`\r\n        );\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(\r\n            `todo-lists/${todolistId}/tasks/${taskId}`,\r\n            model\r\n        );\r\n    },\r\n};\r\nexport const authAPI = {\r\n    login(data: loginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, data);\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id:number, email:string, login:string}>>('auth/me')\r\n    }\r\n};\r\n//types\r\nexport type TodolistType = {\r\n    id: string;\r\n    title: string;\r\n    addedDate: string;\r\n    order: number;\r\n};\r\nexport type TaskType = {\r\n    description: string | null;\r\n    title: string;\r\n    status: TaskStatuses;\r\n    priority: TaskPriorities;\r\n    startDate: string | null;\r\n    deadline: string | null;\r\n    id: string;\r\n    todoListId: string;\r\n    order: number;\r\n    addedDate: string;\r\n};\r\nexport type loginParamsType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha?: string;\r\n};\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number;\r\n    messages: Array<string>;\r\n    data: D;\r\n};\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string;\r\n    description: string | null;\r\n    status: TaskStatuses;\r\n    priority: TaskPriorities;\r\n    startDate: string | null;\r\n    deadline: string | null;\r\n};\r\ntype CreateDataTodolistType = { item: TodolistType };\r\ntype GetTasksResponse = {\r\n    error: string | null;\r\n    totalCount: number;\r\n    items: TaskType[];\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import { setErrorAC, SetErrorOrStatusType, setStatusAC } from \"../app/app-reducer\"\r\nimport { ResponseType } from \"../api/todolists-api\"\r\nimport { Dispatch } from \"redux\"\r\n\r\n\r\nexport const handleServerAppError = <D>(data :ResponseType<D>, dispatch: Dispatch<SetErrorOrStatusType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string },dispatch: Dispatch<SetErrorOrStatusType>) => {\r\n    dispatch(setErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setStatusAC('failed'))\r\n}","import { Dispatch } from \"redux\";\r\nimport { authAPI, loginParamsType } from \"../../api/todolists-api\";\r\nimport { SetErrorOrStatusType, setStatusAC } from \"../../app/app-reducer\";\r\nimport { handleServerAppError, handleServerNetworkError, } from \"../../utils/error-utils\";\r\n\r\nconst initialState: initialStateType = {\r\n    isLoggedIn: false,\r\n}\r\n\r\nexport const authReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGEDIN\":\r\n            return { ...state, isLoggedIn: action.value }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n//actions\r\nexport const setIsLoggedInAC = (value: boolean) => {\r\n    return { type: \"login/SET-IS-LOGGEDIN\", value } as const;\r\n}\r\n//thuks\r\nexport const loginTC = (data: loginParamsType) => {\r\n    return (dispatch: Dispatch<ThunkDispatchType>) => {\r\n        dispatch(setStatusAC(\"loading\"))\r\n        authAPI.login(data).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const logoutTC = () => {\r\n    return (dispatch: Dispatch<ThunkDispatchType>) => {\r\n        dispatch(setStatusAC(\"loading\"))\r\n        authAPI.logout().then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n//types\r\ntype ThunkDispatchType = ActionsType | SetErrorOrStatusType\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\ntype initialStateType = { isLoggedIn: boolean }\r\n","import { Dispatch } from 'redux';\r\nimport { authAPI } from '../api/todolists-api';\r\nimport { setIsLoggedInAC } from '../features/login/login-reducer';\r\nconst InitialState: InitialStateType = {\r\n  status: \"idle\",\r\n  error: null,\r\n  isInitialized: false\r\n}\r\n\r\nexport const appReducer = (\r\n  state: InitialStateType = InitialState,\r\n  action: ActionType\r\n) => {\r\n  switch (action.type) {\r\n    case \"APP/SET-STATUS\":\r\n      return { ...state, status: action.status }\r\n    case \"APP/SET-ERROR\":\r\n      return { ...state, error: action.error }\r\n    case \"APP/SET-IS-INITIALIZED\":\r\n      return { ...state, isInitialized: action.value }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const setErrorAC = (error: string | null) => {\r\n  return { type: \"APP/SET-ERROR\", error } as const\r\n}\r\nexport const setStatusAC = (status: RequestStatusType) => {\r\n  return { type: \"APP/SET-STATUS\", status } as const\r\n}\r\nexport const setAppInitializedAC = (value: boolean) => {\r\n  return { type: \"APP/SET-IS-INITIALIZED\", value } as const\r\n}\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me().then(res => {\r\n    if (res.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC(true))\r\n    }\r\n    dispatch(setAppInitializedAC(true))\r\n  })\r\n}\r\n\r\n//type\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\nexport type SetErrorActionType = ReturnType<typeof setErrorAC>\r\nexport type setStatusActionType = ReturnType<typeof setStatusAC>\r\nexport type SetErrorOrStatusType = SetErrorActionType | setStatusActionType\r\ntype ActionType = SetErrorOrStatusType | ReturnType<typeof setAppInitializedAC>\r\nexport type InitialStateType = {\r\n  status: RequestStatusType\r\n  error: string | null\r\n  isInitialized: boolean\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../../api/todolists-api\";\r\nimport {\r\n    RequestStatusType,\r\n    setErrorAC,\r\n    SetErrorActionType,\r\n    SetErrorOrStatusType,\r\n    setStatusAC,\r\n    setStatusActionType\r\n} from \"../../../app/app-reducer\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"../../../utils/error-utils\";\r\nimport {\r\n    addTodolistAC, AddTodolistActionType, removeTodolistAC, RemoveTodolistActionType,\r\n    setTodolistsAC, SetTodolistsActionType\r\n} from \"../todolist-reducer\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASKS\":\r\n            return {...state, [action.todoListId]: state[action.todoListId].filter(t => t.id != action.taskId)}\r\n        case \"ADD-TASK\":\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case \"UPDATE-TASK\":\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case \"CHANGE-TASK-ENTITY-STATUS\":\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, entityStatus: action.status} : t)\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todolist.id]: []}\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todolistId]\r\n            return stateCopy\r\n        }\r\n        case \"SET_TODOLISTS\" : {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case \"SET-TASKS\" : {\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const removeTaskAC = (todoListId: string, taskId: string) => {\r\n    return {type: \"REMOVE-TASKS\", todoListId, taskId} as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {type: 'ADD-TASK', task} as const\r\n}\r\nexport const updateTaskAC = (todolistId: string, taskId: string, model: UpdateDomainTaskModelType) => {\r\n    return {type: \"UPDATE-TASK\", todolistId, taskId, model} as const\r\n}\r\nexport const changeTaskEntityStatusAC = (todolistId: string, taskId: string, status: RequestStatusType) => {\r\n    return {type: \"CHANGE-TASK-ENTITY-STATUS\", todolistId, taskId, status} as const\r\n}\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) => {\r\n    return {type: \"SET-TASKS\", todolistId, tasks} as const\r\n}\r\n\r\n//thuks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ThunkDispatchType>) => {\r\n    dispatch(setStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId).then(res => {\r\n        const tasks = res.data.items\r\n        dispatch(setTasksAC(todolistId, tasks))\r\n        dispatch(setStatusAC('succeeded'))\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ThunkDispatchType>) => {\r\n    dispatch(setStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId).then(res => {\r\n        dispatch(removeTaskAC(todolistId, taskId))\r\n        dispatch(setStatusAC('succeeded'))\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => {\r\n    return (dispatch: Dispatch<ThunkDispatchType>) => {\r\n        dispatch(setStatusAC('loading'))\r\n        todolistsAPI.createTask(title, todolistId).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: Dispatch<ThunkDispatchType>, getState: () => AppRootStateType) => {\r\n        dispatch(setStatusAC('loading'))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            throw new Error(\"task not found in the state\")\r\n            dispatch(setStatusAC('failed'))\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel\r\n        }\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(updateTaskAC(todolistId, taskId, domainModel))\r\n                dispatch(setStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n\r\n//types\r\ntype ThunkDispatchType = ActionsType | SetErrorOrStatusType\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n    | SetErrorActionType\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = { [key: string]: Array<TaskType> }","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\r\nimport s from './EditableSpan.module.css'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({disabled = false, ...props}: EditableSpanType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = useCallback(() => {\r\n        setEditMode(true)\r\n    }, [])\r\n\r\n    const offEditMode = useCallback(() => {\r\n        setEditMode(false)\r\n        if (title.trim()) {\r\n            props.changeTitle(title.trim())\r\n        }\r\n    }, [props, title])\r\n\r\n    const onKeyPress = useCallback(({charCode}: KeyboardEvent<HTMLInputElement>) => {\r\n        if (charCode === 13) {\r\n            offEditMode()\r\n        }\r\n    }, [props, title])\r\n\r\n    const onChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }, [])\r\n\r\n    return editMode\r\n        ? <TextField variant={\"outlined\"}\r\n                     autoFocus={true}\r\n                     onBlur={offEditMode}\r\n                     value={title}\r\n                     onChange={onChange}\r\n                     onKeyPress={onKeyPress}\r\n                     disabled={disabled}\r\n        />\r\n        : <span onDoubleClick={onEditMode} className={s.ul_span}>{props.title}</span>\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport AddBoxTwoToneIcon from '@material-ui/icons/AddBoxTwoTone';\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormType) => {\r\n\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = useCallback(() => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }, [addItem, title])\r\n\r\n    const onChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }, [setTitle])\r\n\r\n    const onKeyPress = useCallback(({charCode}: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (charCode === 13) {\r\n            addTask()\r\n        }\r\n    }, [addTask, error])\r\n\r\n    return <div>\r\n        <TextField\r\n            disabled={disabled}\r\n            color={\"primary\"}\r\n            label={\"Type value\"}\r\n            error={!!error}\r\n            helperText={error}\r\n            value={title}\r\n            onChange={onChange}\r\n            onKeyPress={onKeyPress}\r\n        />\r\n        <IconButton color=\"primary\"\r\n                    size=\"small\"\r\n                    style={{marginLeft: \"13px\", marginTop: \"16px\"}}\r\n                    onClick={addTask}\r\n                    disabled={disabled}\r\n        >\r\n            <AddBoxTwoToneIcon/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport s from '../Todolist.module.css'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { TaskStatuses, TaskType } from \"../../../api/todolists-api\";\r\nimport { EditableSpan } from \"../../../components/editableSpan/EditableSpan\";\r\n \r\ntype TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    changeTaskStatus: (todolistId: string, id: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (todolistId: string, id: string, newTitle: string) => void\r\n    removeTask: (todolistId: string, id: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    \r\n        const onClickHandler = useCallback(() => props.removeTask(props.todolistId, props.task.id)\r\n            , [props.todolistId, props.task.id])\r\n    \r\n        const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDaneValue = e.currentTarget.checked\r\n            props.changeTaskStatus(\r\n                props.todolistId, props.task.id, newIsDaneValue ? TaskStatuses.Completed : TaskStatuses.New\r\n            )\r\n        }, [props.todolistId, props.task.id])\r\n    \r\n        const changeTitle = useCallback((title: string) => {\r\n            props.changeTaskTitle(props.todolistId, props.task.id, title)\r\n}, [props.todolistId, props.task.id])\r\n\r\n        return <li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? s.is_done : \"\"}\r\n                   style={{paddingLeft: \"0\", listStyleType: \"none\", margin: \"0\"}}>\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                onChange={onChangeHandler}\r\n                size=\"small\"\r\n                style={props.task.status === TaskStatuses.Completed ? {opacity: 0.9} : {opacity: 1}}\r\n                color='secondary'\r\n            />\r\n            <EditableSpan changeTitle={changeTitle} title={props.task.title}/>\r\n            <IconButton className={s.but_del} aria-label=\"delete\" size=\"small\" color='default'\r\n                        onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n\r\n\r\n} )","import React, {useCallback, useEffect} from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useDispatch, useSelector } from \"react-redux\";\r\nimport { TaskStatuses, TaskType } from \"../../api/todolists-api\";\r\nimport { fetchTasksTC } from \"./tasks/tasks-reducer\";\r\nimport { FilterValueType, TodolistDomainType } from \"./todolist-reducer\";\r\nimport { EditableSpan } from \"../../components/editableSpan/EditableSpan\";\r\nimport { AddItemForm } from \"../../components/addItemForm/AddItemForm\";\r\nimport { Task } from \"./tasks/Task\";\r\n\r\n\r\nexport type PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistId: string, id: string) => void\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeTaskStatus: (todolistId: string, id: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (todolistId: string, id: string, newTitle: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (todolistId: string, title: string) => void\r\n    changeFilter: (todolistId: string, value: FilterValueType) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo){\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }, [props.todolist.id])\r\n    const changeTodolistTitle = useCallback((title: string) =>\r\n        props.changeTodolistTitle(props.todolist.id, title),[props])\r\n    \r\n    let tasksForTodolist = props.tasks\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const changeFilterAll = useCallback(() => \r\n        props.changeFilter(props.todolist.id, \"all\"),[props.todolist.id, props.changeFilter])\r\n    const changeFilterActive = useCallback(() => \r\n        props.changeFilter(props.todolist.id, \"active\"),[props.todolist.id, props.changeFilter])\r\n    const changeFilterCompleted = useCallback(() => \r\n        props.changeFilter(props.todolist.id, \"completed\"),[props.todolist.id, props.changeFilter])\r\n\r\n    return <div>\r\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                startIcon={<DeleteForeverIcon/>}\r\n                onClick={removeTodolist}\r\n                disabled={props.todolist.entityStatus === 'loading'}\r\n            >\r\n            </Button>\r\n        </div>\r\n\r\n        <h2 style={{\r\n            display: \"flex\", justifyContent: \"center\", marginTop: \"0\",\r\n            fontFamily: \"Bradley Hand, cursive\", marginBottom: \"5px\"\r\n        }}>\r\n            <EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle}\r\n                          disabled={props.todolist.entityStatus === 'loading'}/>\r\n        </h2>\r\n\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <ul style={{fontFamily: \"Bradley Hand, cursive\", paddingLeft: \"0\", marginBottom: \"0\"}}>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id} removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle} changeTaskStatus={props.changeTaskStatus}/>)\r\n            }\r\n            <div style={{display: \"flex\", justifyContent: \"center\", marginTop: \"10px\"}}>\r\n                <Button variant={props.todolist.filter === \"all\" ? \"contained\" : \"text\"}\r\n                        onClick={changeFilterAll}>All\r\n                </Button>\r\n                <Button variant={props.todolist.filter === \"active\" ? \"contained\" : \"text\"}\r\n                        color={\"primary\"}\r\n                        onClick={changeFilterActive}>Active\r\n                </Button>\r\n                <Button variant={props.todolist.filter === \"completed\" ? \"contained\" : \"text\"}\r\n                        color={\"secondary\"}\r\n                        onClick={changeFilterCompleted}>Completed\r\n                </Button>\r\n            </div>\r\n        </ul>\r\n    </div>\r\n} )","import {Dispatch} from \"redux\";\r\nimport {v1} from \"uuid\";\r\nimport {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\r\nimport { setStatusAC, SetErrorOrStatusType, RequestStatusType } from \"../../app/app-reducer\";\r\nimport { handleServerNetworkError } from \"../../utils/error-utils\";\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistReducer = (state: Array<TodolistDomainType> = initialState, action: ActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return [{...action.todolist, filter: \"all\", entityStatus: 'idle'}, ...state]\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        }\r\n        case \"SET_TODOLISTS\": {\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {type: \"REMOVE-TODOLIST\", todolistId} as const\r\n}\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n    return {type: \"ADD-TODOLIST\", todolist} as const\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", id, title} as const\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValueType) => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", id, filter} as const\r\n}\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => {\r\n    return {type: \"CHANGE-TODOLIST-ENTITY-STATUS\", id, status} as const\r\n}\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => {\r\n    return {type: \"SET_TODOLISTS\", todolists} as const\r\n}\r\n\r\n//thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ThunkDispatchType>) => {\r\n        dispatch(setStatusAC('loading'))\r\n        todolistsAPI.getTodolists().then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setStatusAC('succeeded'))\r\n        })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ThunkDispatchType>) => {\r\n        dispatch(setStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId).then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(setStatusAC('succeeded'))\r\n        })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ThunkDispatchType>) => {\r\n        dispatch(setStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title).then(res => {\r\n            const newTodolist = res.data.data.item\r\n            dispatch(addTodolistAC(newTodolist))\r\n            dispatch(setStatusAC('succeeded'))\r\n        })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ThunkDispatchType>) => {\r\n        todolistsAPI.updateTodolist(id, title).then((res) => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n        })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const updateTodolistTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ThunkDispatchType>) => {\r\n        todolistsAPI.updateTodolist(id, title).then((res) => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n        })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type ActionType =\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\ntype ThunkDispatchType = ActionType | SetErrorOrStatusType\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValueType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"../../components/addItemForm/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistAC, changeTodolistFilterAC,\r\n    changeTodolistTitleAC, fetchTodolistsTC, FilterValueType, removeTodolistAC, TodolistDomainType\r\n} from \"./todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TaskStatuses} from '../../api/todolists-api';\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks/tasks-reducer';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {addTodolistTC, changeTodolistTitleTC, removeTodolistTC} from './todolist-reducer';\r\nimport { Redirect } from 'react-router';\r\n\r\nexport const TodolistsList: React.FC<TodoListsListType> = ({demo = false}) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=> state.auth.isLoggedIn)\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        if(!demo || !isLoggedIn){\r\n        dispatch(fetchTodolistsTC())\r\n        }\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (todolistId: string, id: string) {\r\n        const thunk = removeTaskTC(todolistId, id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const addTask = useCallback((todolistId: string, title: string) => {\r\n        dispatch(addTaskTC(todolistId, title))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((todolistId: string, id: string, status: TaskStatuses) => {\r\n        const thunk = updateTaskTC(todolistId, id, {status})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((todolistId: string, id: string, newTitle: string) => {\r\n        const thunk = updateTaskTC(todolistId, id, {title: newTitle})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId))\r\n    }, [dispatch])\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(changeTodolistTitleTC(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((todolistId: string, value: FilterValueType) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn){\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"15px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={4} style={{\r\n            display: \"flex\", justifyContent: \"space-between\",\r\n            flexWrap: \"wrap\", flexDirection: \"row\"\r\n        }}>\r\n            <div style={{display: \"flex\", justifyContent: \"space-around\", flexWrap: \"wrap\"}}>\r\n                {todolists.map(tl => {\r\n\r\n                    let allTodolistTasks = tasks[tl.id] || []\r\n                    return (\r\n                        <Grid item spacing={4} style={{margin: \"15px\"}}>\r\n                            <Paper elevation={5} style={{padding: \"15px\", display: \"flex\"}}>\r\n                                <Todolist\r\n                                    todolist={tl}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeTaskStatus}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    changeFilter={changeFilter}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </div>\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n//type\r\ntype TodoListsListType = { demo?: boolean }","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport {useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setErrorAC } from '../../app/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const isOpen = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setErrorAC(null))\r\n    };\r\n\r\n    return (\r\n            <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport {\r\n    Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField,\r\n    Button, Grid\r\n} from '@material-ui/core'\r\nimport { useFormik } from 'formik'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginTC } from './login-reducer';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=> state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n        validate: values => {\r\n            if (!values.email) {\r\n                return { email: 'Email is required' }\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                return { email: 'Invalid email address' }\r\n            }\r\n            if (!values.password) {\r\n                return { password: 'Password is required' }\r\n            }\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn){\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n    \r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            {...formik.getFieldProps(\"email\")}\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            {...formik.getFieldProps(\"password\")}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<\r\n                                Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'}\r\n                            color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography } from \"@material-ui/core\";\r\nimport { Menu} from \"@material-ui/icons\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { TodolistsList } from '../features/todolists/TodolistsList';\r\nimport { ErrorSnackbar } from '../components/errorSnackbar/ErrorSnackbar';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './store';\r\nimport { initializeAppTC, RequestStatusType } from './app-reducer';\r\nimport { Login } from '../features/login/Login';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { logoutTC } from '../features/login/login-reducer';\r\nimport { useCallback } from 'react';\r\n\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=> state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logOutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    },[])\r\n\r\n    if (!isInitialized) {\r\n        return <div \r\n        style={{position: 'fixed', top: '40%', width: '100%', textAlign: 'center'}}>\r\n            <CircularProgress />\r\n            </div>\r\n    }\r\n \r\n    return (\r\n        <HashRouter>\r\n            <div>\r\n                <ErrorSnackbar />\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu></Menu>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress />}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={\"/\"} render={() => <TodolistsList demo={demo} />} />\r\n                    <Route path={\"/login\"} render={() => <Login />} />\r\n                </Container>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n//type\r\ntype PropsType = { demo?: boolean}","import {combineReducers, createStore, applyMiddleware} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { authReducer } from \"../features/login/login-reducer\";\r\nimport { tasksReducer } from \"../features/todolists/tasks/tasks-reducer\";\r\nimport { todolistReducer } from \"../features/todolists/todolist-reducer\";\r\nimport { appReducer } from \"./app-reducer\";\r\n\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    todolists: todolistReducer,\r\n    tasks: tasksReducer,\r\n    app : appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from \"react-redux\";\r\nimport App from './app/App';\r\nimport { store } from './app/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}